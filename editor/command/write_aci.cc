// Copyright 2016, Georg Sauthoff <mail@georg.so>

/* {{{ LGPLv3

    This file is part of tree-model.

    tree-model is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    tree-model is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with tree-model.  If not, see <http://www.gnu.org/licenses/>.

}}} */

#include "write_aci.hh"

#include <QAbstractItemModel>
#include <QMimeData>
#include <QByteArray>

#include <xfsx/xml_writer_arguments.hh>
#include <xfsx/tap/traverser.hh>
#include <xfsx/byte.hh>

#include <editor/traverser/qmi_proxy.hh>
#include <editor/traverser/check_cancel.hh>

#include <tree_model/util.hh>

using namespace std;

namespace editor {
  namespace command {

    void Write_ACI::set_delay(unsigned delay)
    {
      delay_ = delay;
    }

    void Write_ACI::set_model(QAbstractItemModel *model)
    {
      model_ = model;
    }
    void Write_ACI::set_file_type(const File_Type &ft)
    {
      file_type_ = ft;
    }

    void Write_ACI::write()
    {
      if (!model_)
        return;


      tree_model::DF_QMI_Traverser t(model_->index(0, 0));
      xfsx::xml::Pretty_Writer_Arguments pargs(file_type_.asn_filenames());
      editor::traverser::QMI_Proxy p(pargs.name_translator);

      xfsx::tap::traverser::Audit_Control_Info aci;
      editor::traverser::Check_Cancel check_cancel;
      try {
        aci(p, t, check_cancel);
      } catch (const editor::traverser::Cancel_Exception &e) {
        return;
      }

      xfsx::byte::writer::Memory m;
      aci.comment = "Generated by libxfsx";
      aci.print(m);

      emit begin_transaction_requested(tr("Write ACI"));
      auto old = tree_model::util::find_child(model_->index(0, 0),
          "AuditControlInfo");
      if (old.isValid())
        model_->removeRow(old.row(), old.parent());

      QMimeData md;
      md.setData("text/xml", QByteArray(m.begin(), m.end() - m.begin()));
      model_->dropMimeData(&md, Qt::CopyAction, -1, -1, model_->index(0, 0));

      emit commit_requested();
    }

  } // namespace command
} // namespace editor
